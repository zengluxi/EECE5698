"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class message_t(object):
    __slots__ = ["time", "latitude", "latitude_direc", "longtitude", "longtitude_direc", "altitude", "altitude_unit", "utm_x", "utm_y"]

    def __init__(self):
        self.time = ""
        self.latitude = ""
        self.latitude_direc = ""
        self.longtitude = ""
        self.longtitude_direc = ""
        self.altitude = ""
        self.altitude_unit = ""
        self.utm_x = 0.0
        self.utm_y = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(message_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __time_encoded = self.time.encode('utf-8')
        buf.write(struct.pack('>I', len(__time_encoded)+1))
        buf.write(__time_encoded)
        buf.write(b"\0")
        __latitude_encoded = self.latitude.encode('utf-8')
        buf.write(struct.pack('>I', len(__latitude_encoded)+1))
        buf.write(__latitude_encoded)
        buf.write(b"\0")
        __latitude_direc_encoded = self.latitude_direc.encode('utf-8')
        buf.write(struct.pack('>I', len(__latitude_direc_encoded)+1))
        buf.write(__latitude_direc_encoded)
        buf.write(b"\0")
        __longtitude_encoded = self.longtitude.encode('utf-8')
        buf.write(struct.pack('>I', len(__longtitude_encoded)+1))
        buf.write(__longtitude_encoded)
        buf.write(b"\0")
        __longtitude_direc_encoded = self.longtitude_direc.encode('utf-8')
        buf.write(struct.pack('>I', len(__longtitude_direc_encoded)+1))
        buf.write(__longtitude_direc_encoded)
        buf.write(b"\0")
        __altitude_encoded = self.altitude.encode('utf-8')
        buf.write(struct.pack('>I', len(__altitude_encoded)+1))
        buf.write(__altitude_encoded)
        buf.write(b"\0")
        __altitude_unit_encoded = self.altitude_unit.encode('utf-8')
        buf.write(struct.pack('>I', len(__altitude_unit_encoded)+1))
        buf.write(__altitude_unit_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ff", self.utm_x, self.utm_y))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != message_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return message_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = message_t()
        __time_len = struct.unpack('>I', buf.read(4))[0]
        self.time = buf.read(__time_len)[:-1].decode('utf-8', 'replace')
        __latitude_len = struct.unpack('>I', buf.read(4))[0]
        self.latitude = buf.read(__latitude_len)[:-1].decode('utf-8', 'replace')
        __latitude_direc_len = struct.unpack('>I', buf.read(4))[0]
        self.latitude_direc = buf.read(__latitude_direc_len)[:-1].decode('utf-8', 'replace')
        __longtitude_len = struct.unpack('>I', buf.read(4))[0]
        self.longtitude = buf.read(__longtitude_len)[:-1].decode('utf-8', 'replace')
        __longtitude_direc_len = struct.unpack('>I', buf.read(4))[0]
        self.longtitude_direc = buf.read(__longtitude_direc_len)[:-1].decode('utf-8', 'replace')
        __altitude_len = struct.unpack('>I', buf.read(4))[0]
        self.altitude = buf.read(__altitude_len)[:-1].decode('utf-8', 'replace')
        __altitude_unit_len = struct.unpack('>I', buf.read(4))[0]
        self.altitude_unit = buf.read(__altitude_unit_len)[:-1].decode('utf-8', 'replace')
        self.utm_x, self.utm_y = struct.unpack(">ff", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if message_t in parents: return 0
        tmphash = (0xed1375d5853c8f4b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if message_t._packed_fingerprint is None:
            message_t._packed_fingerprint = struct.pack(">Q", message_t._get_hash_recursive([]))
        return message_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

